name: Code Quality and Security Checks

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  quality_and_security_checks:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install, Update, and Run ClamAV
      - name: Scan repository for malware with ClamAV
        run: |
          # 1. Install ClamAV and the freshclam database updater
          # -y accepts all prompts
          # qq reduces terminal output
          echo "Installing ClamAV..."
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          
          # 2. Update the ClamAV virus database
          # This is a critical step to get the latest definitions
          echo "Updating virus definitions..."
          sudo freshclam
          
          # 3. Run the scan
          # -r: recursive scan
          # --infected: only print infected files
          # --exclude-dir: ignore the .git folder to speed up the scan
          # The command will exit with a non-zero status code if viruses are found,
          # which will automatically fail the workflow step.
          echo "Scanning repository..."
          sudo clamscan -r --infected --exclude-dir=./.git .

      # Step 3: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.7

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint flake8 black bandit mypy pip-audit radon xenon semgrep

      # Step 5: Format code with Black (Check Only)
      - name: Check code formatting with Black
        run: black --check src

      # Step 6: Lint with Pylint
      - name: Run Pylint
        run: pylint $(find src -name "*.py" -not -path "./venv/*")

      # Step 7: Check code style with Flake8
      - name: Run Flake8
        run: flake8 src --exclude=venv

      # Step 8: Type Checking with Mypy
      - name: Run Mypy
        run: mypy src

      # Step 9: Static Analysis for Security Issues with Bandit
      - name: Run Bandit
        run: bandit -r src --exclude ./venv --ini .bandit

      # Step 10: Dependency Vulnerability Check with pip-audit
      - name: Run Pip-audit
        run: pip-audit

      # Step 11: Analyze Code Complexity with Radon
      - name: Run Radon
        run: radon cc src -s -a

      # Step 12: Monitor Code Quality Metrics with Xenon
      - name: Run Xenon
        run: xenon src --max-absolute B --max-modules B --max-average A

      # Step 13: Lightweight Static Analysis with Semgrep
      - name: Run Semgrep
        run: semgrep --config auto
