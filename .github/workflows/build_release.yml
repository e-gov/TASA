name: Build and Release

on:
  workflow_run:
    workflows: ["Code Quality and Security Checks"]
    types:
      - completed
    branches:
      - main
      - develop

permissions:
  contents: write

jobs:
  versioning:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      BUILD_TYPE: ${{ steps.get_version.outputs.BUILD_TYPE }}
      SAFE_VERSION: ${{ steps.get_version.outputs.SAFE_VERSION }}
      FILE_VERSION: ${{ steps.get_version.outputs.FILE_VERSION }}
      HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Get version information
        id: get_version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_ID=${GITHUB_RUN_NUMBER}
          YEAR=$(date +'%y')
          WEEK=$(date +'%U')
          Z=0
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"

          if [[ "${BRANCH_NAME}" == "main" ]]; then
            VERSION="${YEAR}.${WEEK}.${Z}-${BUILD_ID}"
            BUILD_TYPE="stable"
          elif [[ "${BRANCH_NAME}" == "develop" ]]; then
            VERSION="${YEAR}.${WEEK}.${Z}-${COMMIT_HASH}-rc.${BUILD_ID}"
            BUILD_TYPE="rc"
          elif [[ "${BRANCH_NAME}" == bugfix/* ]]; then
            Z=1
            VERSION="${YEAR}.${WEEK}.${Z}-${COMMIT_HASH}-dev.${BUILD_ID}"
            BUILD_TYPE="dev"
          elif [[ "${BRANCH_NAME}" == feature/* ]]; then
            VERSION="${YEAR}.${WEEK}.${Z}-${COMMIT_HASH}-dev.${BUILD_ID}"
            BUILD_TYPE="dev"
          else
            echo "Unsupported branch type: ${BRANCH_NAME}"
            exit 1
          fi

          SAFE_VERSION=$(echo "${VERSION}" | tr '.' '_')
          FILE_VERSION="${YEAR}.${WEEK}.${Z}.0"

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_OUTPUT
          echo "SAFE_VERSION=${SAFE_VERSION}" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=${FILE_VERSION}" >> $GITHUB_OUTPUT

  build-windows:
    runs-on: windows-latest
    needs: versioning
    env:
      VERSION: ${{ needs.versioning.outputs.VERSION }}
      BUILD_TYPE: ${{ needs.versioning.outputs.BUILD_TYPE }}
      SAFE_VERSION: ${{ needs.versioning.outputs.SAFE_VERSION }}
      FILE_VERSION: ${{ needs.versioning.outputs.FILE_VERSION }}
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.versioning.outputs.HEAD_SHA }}

      - name: Set postfix for test builds
        if: needs.versioning.outputs.BUILD_TYPE != 'stable'
        run: echo "POSTFIX=-test" >> $GITHUB_ENV
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.7

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: cmd

      - name: Build executable with Nuitka
        run: |
          mkdir build
          nuitka --standalone --onefile ^
            --output-dir=build/windows ^
            --output-filename=tasa-${{ env.SAFE_VERSION }}.exe ^
            src/gui.py ^
            --include-data-files=src/static/low.png=low.png ^
            --include-data-files=src/static/low.ico=low.ico ^
            --windows-icon-from-ico=src/static/low.ico ^
            --assume-yes-for-downloads ^
            --windows-console-mode=disable ^
            --company-name="RIA" ^
            --product-name="TASA" ^
            --file-version="${{ env.FILE_VERSION }}" ^
            --product-version="${{ env.FILE_VERSION }}" ^
            --file-description="TASA rakendus" ^
            --copyright="RIA" ^
            --trademarks="RIA"
        shell: cmd

      - name: Compile Windows Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: scripts/installer.iss
          options: /DAppVersion=${{ env.VERSION }} /DSafeVersion=${{ env.SAFE_VERSION }} /DPostfix=${{ env.POSTFIX }}

      - name: List files for debugging
        run: dir /s
        shell: cmd

      - name: Upload Installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: tasa-windows-installer${{ env.POSTFIX }}
          path: scripts/Output/tasa-installer-${{ env.SAFE_VERSION }}${{ env.POSTFIX }}.exe

  build-linux:
    runs-on: ubuntu-latest

    container:
      image: quay.io/pypa/manylinux_2_34_x86_64:latest
    needs: versioning
    env:
      VERSION: ${{ needs.versioning.outputs.VERSION }}
      BUILD_TYPE: ${{ needs.versioning.outputs.BUILD_TYPE }}
      SAFE_VERSION: ${{ needs.versioning.outputs.SAFE_VERSION }}
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.versioning.outputs.HEAD_SHA }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          yum install -y \
            python3 python3-devel python3-pip \
            ruby ruby-devel make gcc gcc-c++ \

          gem install --no-document fpm

          pip3 install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build executable
        run: |
          mkdir -p build/linux
          nuitka --standalone --onefile \
            --output-dir=build/linux \
            --output-filename=tasa-${{ env.SAFE_VERSION }} \
            src/gui.py \
            --include-data-files=src/static/low.png=low.png \
            --assume-yes-for-downloads

      - name: Prepare package root
        run: |
          mkdir -p pkgroot/usr/local/bin
          cp build/linux/tasa-${{ env.SAFE_VERSION }} pkgroot/usr/local/bin/tasa
          chmod +x pkgroot/usr/local/bin/tasa
          mkdir -p pkgroot/usr/share/applications
          cat > pkgroot/usr/share/applications/tasa.desktop <<EOF
          [Desktop Entry]
          Name=Tasa
          Exec=tasa
          Icon=tasa
          Type=Application
          Categories=Utility;
          EOF
          mkdir -p pkgroot/usr/share/pixmaps
          cp src/static/low.png pkgroot/usr/share/pixmaps/tasa.png

      - name: Build .deb
        run: |
          fpm \
            -s dir \
            -t deb \
            -n tasa \
            -v "${{ env.VERSION }}" \
            --iteration 1 \
            --architecture amd64 \
            -C pkgroot .
          mv tasa_${{ env.VERSION }}-1_amd64.deb build/linux/tasa-${{ env.SAFE_VERSION }}.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tasa-linux
          path: |
            build/linux/tasa-${{ env.SAFE_VERSION }}
            build/linux/tasa-${{ env.SAFE_VERSION }}.deb

  build-macos:
    runs-on: macos-latest
    needs: versioning
    env:
      VERSION: ${{ needs.versioning.outputs.VERSION }}
      BUILD_TYPE: ${{ needs.versioning.outputs.BUILD_TYPE }}
      SAFE_VERSION: ${{ needs.versioning.outputs.SAFE_VERSION }}
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.versioning.outputs.HEAD_SHA }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.7

      - name: Set postfix for test builds
        if: needs.versioning.outputs.BUILD_TYPE != 'stable'
        run: echo "POSTFIX=-test" >> $GITHUB_ENV

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build .app bundle with Nuitka
        run: |
          nuitka src/gui.py \
            --standalone \
            --macos-create-app-bundle \
            --output-dir=build \
            --include-data-files=src/static/low.png=low.png \
            --macos-app-icon=src/static/low.png \
            --macos-app-name="TASA" \
            --macos-app-version="${{ env.VERSION }}" \
            --assume-yes-for-downloads

      - name: Rename .app to final name
        run: mv build/gui.app build/TASA.app

      - name: Stage files for DMG
        run: |
          mkdir -p dmg_staging
          cp -R build/TASA.app dmg_staging
          ln -s /Applications dmg_staging/Applications

      - name: Create .dmg disk image
        run: |
          mkdir -p dist
          hdiutil create -volname "TASA Installer${{ env.POSTFIX }}" \
            -srcfolder "dmg_staging" \
            -ov -format UDZO "dist/tasa-installer-${{ env.SAFE_VERSION }}${{ env.POSTFIX }}.dmg"

      - name: Upload Installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: tasa-macos-installer${{ env.POSTFIX }}
          path: dist/tasa-installer-${{ env.SAFE_VERSION }}${{ env.POSTFIX }}.dmg

  tag_and_release:
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-linux
      - build-macos
      - versioning
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.versioning.outputs.HEAD_SHA }}
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Git Tag
        run: |
          git tag -a "v${{ needs.versioning.outputs.VERSION }}" -m "Release v${{ needs.versioning.outputs.VERSION }}"
          git push origin "v${{ needs.versioning.outputs.VERSION }}"

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: tasa-windows-installer
          path: artifacts/tasa-windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: tasa-linux
          path: artifacts/tasa-linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: tasa-macos-installer
          path: artifacts/tasa-macos

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ needs.versioning.outputs.VERSION }}
          name: Release v${{ needs.versioning.outputs.VERSION }}
          body: |
            This release contains the following:
            - Windows Installer (tasa-installer-${{ needs.versioning.outputs.SAFE_VERSION }}.exe)
            - macOS Disk Image (tasa-installer-${{ needs.versioning.outputs.SAFE_VERSION }}.dmg)
            - Built files for Linux:
              - Standalone binary (tasa-${{ needs.versioning.outputs.SAFE_VERSION }})
              - Debian package (tasa-${{ needs.versioning.outputs.SAFE_VERSION }}.deb)
            - Build Type: ${{ needs.versioning.outputs.BUILD_TYPE }}
          draft: true
          artifacts: |
            artifacts/tasa-windows/tasa-installer-${{ needs.versioning.outputs.SAFE_VERSION }}.exe
            artifacts/tasa-macos/tasa-installer-${{ needs.versioning.outputs.SAFE_VERSION }}.dmg
            artifacts/tasa-linux/tasa-${{ needs.versioning.outputs.SAFE_VERSION }}
            artifacts/tasa-linux/tasa-${{ needs.versioning.outputs.SAFE_VERSION }}.deb
